package tools;

import server.MapleItemInformationProvider;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.charset.Charset;

public class CommodityItemUpdate {

    public static void main(String args[]) throws FileNotFoundException, IOException {
        if (new File("Commodity.img.xml").exists()) {
            new File("Commodity.img.xml").delete();
        }

        // 로얄 스타일
        int[] royalStyle = {1005013, 1005012, 1005011, 1005010, 1004997, 1004996, 1004981, 1004964, 1004961, 1004953, 1004952, 1004946, 1004932, 1004925, 1004912, 1004890, 1004889, 1004880, 1004879, 1004878, 1004876, 1004863, 1004862, 1004858, 1004854, 1004844, 1004842, 1004841, 1004839, 1004832, 1004831, 1004830, 1004827, 1004826, 1004822, 1004806, 1004804, 1004803, 1004802, 1004801, 1004800, 1004792, 1004789, 1004787, 1004760, 1004722, 1004720, 1004708, 1004706, 1004662, 1004659, 1004601, 1004588, 1004586, 1004571, 1004570, 1004548, 1004547, 1004546, 1004545, 1004544, 1004514, 1004506, 1004505, 1004504, 1004501, 1004500, 1004499, 1004496, 1004495, 1004494, 1004483, 1004482, 1004478, 1004456, 1004455, 1004448, 1004440, 1004438, 1004413, 1004406, 1004402, 1004401, 1004400, 1004399, 1004398, 1004397, 1004396, 1004395, 1004394, 1004393, 1004387, 1004331, 1004330, 1004326, 1004325, 1004324, 1004322, 1004299, 1004298, 1004296, 1004295, 1004289, 1004288, 1004287, 1004285, 1004284, 1004246, 1004245, 1004243, 1004204, 1004200, 1004193, 1004191, 1004190, 1004182, 1004178, 1004137, 1004136, 1004135, 1004125, 1004113, 1004108, 1004106, 1004092, 1004090, 1004070, 1004050, 1004024, 1003963, 1003962, 1003918, 1003917, 1003896, 1003895, 1003894, 1003872, 1003871, 1003870, 1003868, 1003830, 1003829, 1003814, 1003761, 1003759, 1003667, 1003666, 1003657, 1003656, 1003649, 1003531, 1003524, 1003505, 1003504, 1003489, 1003481, 1003480, 1003476, 1003468, 1003417, 1003405, 1003385, 1003346, 1003247, 1003130, 1003101, 1003001, 1003000, 1002999, 1002998, 1002882, 1002848, 1002823, 1002734, 1002703, 1002704, 1002705, 1002706, 1002697, 1002696, 1002695, 1002678, 1002677, 1004910, 1042378, 1042376, 1042367, 1042345, 1042343, 1042336, 1042333, 1042332, 1042329, 1042276, 1042220, 1042197, 1042196, 1042166, 1042159, 1042057, 1041196, 1042375, 1062245, 1062244, 1062236, 1062235, 1062223, 1062222, 1062211, 1062189, 1062173, 1062050, 1062049, 1061213, 1061155, 1061143, 1060189, 1060188, 1060187, 1053218, 1053217, 1053208, 1053207, 1053202, 1053201, 1053200, 1053199, 1053198, 1053197, 1053196, 1053195, 1053184, 1053183, 1053180, 1053177, 1053169, 1053168, 1053164, 1053163, 1053162, 1053157, 1053156, 1053155, 1053148, 1053146, 1053145, 1053144, 1053142, 1053134, 1053130, 1053127, 1053126, 1053125, 1053124, 1053119, 1053118, 1053117, 1053116, 1053115, 1053110, 1053109, 1053105, 1053104, 1053103, 1053099, 1053095, 1053094, 1053093, 1053092, 1053090, 1053089, 1053088, 1053087, 1053086, 1053085, 1053084, 1053083, 1053061, 1053060, 1053059, 1053058, 1053054, 1053053, 1053052, 1053051, 1053048, 1053046, 1053045, 1053042, 1053041, 1053037,
            1053036, 1053023, 1053022, 1053017, 1053001, 1053000, 1052999, 1052986, 1052982, 1052981, 1052979, 1052978, 1052965, 1052953, 1052925, 1052924, 1052922, 1052921, 1052917, 1052916, 1052910, 1052904, 1052895, 1052894, 1052876, 1052874, 1052873, 1052872, 1052871, 1052870, 1052850, 1052849, 1052844, 1052843, 1052842, 1052838, 1052837, 1052834, 1052833, 1052780, 1052779, 1052771, 1052761, 1052756, 1052684, 1052665, 1052664, 1052663, 1052662, 1052654, 1052604, 1052602, 1052596, 1052575, 1052574, 1052506, 1052423, 1052404, 1052372, 1052367, 1052349, 1052329, 1052294, 1052293, 1052260, 1052213, 1052211, 1052210, 1052150, 1052147, 1052135, 1082715, 1082712, 1082703, 1082702, 1082694, 1082692, 1082685, 1082664, 1082631, 1082574, 1082563, 1082557, 1082534, 1082502, 1082495, 1082471, 1082422, 1082421, 1082267, 1073196, 1073192, 1073238, 1073239, 1073230, 1073229, 1073228, 1073223, 1073222, 1073217, 1073205, 1073204, 1073203, 1073189, 1073188, 1073180, 1073179, 1073178, 1073177, 1073169, 1073168, 1073157, 1073155, 1073153, 1073151, 1073150, 1073145, 1073142, 1073141, 1073135, 1073134, 1073133, 1073132, 1073129, 1073108, 1073107, 1073080, 1073046, 1073047, 1073040, 1073012, 1072999, 1072984, 1072941, 1072944, 1072930, 1072925, 1072923, 1072921, 1072920, 1072919, 1072918, 1072917, 1072916, 1072911, 1072902, 1072900, 1072881, 1072875, 1072873, 1072869, 1072864, 1072863, 1072855, 1072840, 1072839, 1072820, 1072781, 1072780, 1072750, 1072681, 1072680, 1072652, 1072651, 1072650, 1702785, 1702784, 1702783, 1702778, 1702777, 1702765, 1702748, 1702740, 1702727, 1702722, 1702719, 1702714, 1702713, 1702712, 1702711, 1702710, 1702698, 1702697, 1702693, 1702692, 1702682, 1702675, 1702671, 1702660, 1702635, 1702630, 1702606, 1702605, 1702604, 1702603, 1702602, 1702598, 1702588, 1702579, 1702566, 1702557, 1702556, 1702548, 1702546, 1702527, 1702499, 1702492, 1702483, 1702482, 1702479, 1702435, 1702434, 1702407, 1702380, 1702376, 1702374, 1702369, 1702338, 1702326, 1702325, 1702300, 1702286, 1702285, 1702284, 1702278, 1702267, 1702265, 1702262, 1702251, 1702250, 1702249, 1702235, 1702208, 1103039, 1103033, 1103012, 1103007, 1103004, 1102991, 1102983, 1102972, 1102957, 1102956, 1102939, 1102922, 1102921, 1102912, 1102835, 1102827, 1102820, 1102801, 1102788, 1102787, 1102786, 1102785, 1102784, 1102783, 1102782, 1102781, 1102780, 1102756, 1102726, 1102673, 1102668, 1102622, 1102584, 1102573, 1102571, 1102570, 1102569, 1102568, 1102567, 1102508, 1102489, 1102396, 1102392, 1102388, 1102387, 1102346, 1102334, 1102318, 1102301, 1102274, 1102259, 1102241, 1102229, 1102144, 1102098, 1102881, 1032215, 1032214, 1032213, 1032145, 1032138, 1032115, 1022275, 1022270, 1022269, 1022266, 1022258, 1022257, 1022214, 1022203, 1022202, 1022194, 1022173, 1022122, 1022121, 1022095, 1022092, 1022091, 1022057, 1012623, 1012619, 1012552, 1012549, 1012548, 1012535, 1012511, 1012509, 1012487, 1012413, 1012383, 1012166, 1012159, 1012147, 1012131, 1012130, 1012090, 1012051, 1012049, 1005004, 1005003, 1004998, 1004930, 1004916, 1004834, 1004759, 1004758, 1004286, 1004280, 1004202, 1004201, 1004123, 1003975, 1003272, 1002837, 1042350, 1042346, 1062228, 1062220, 1053222, 1053221, 1053220, 1053219, 1053210, 1053209, 1053176, 1053175, 1053174, 1053173, 1053172, 1053171, 1053170, 1053143, 1053138, 1053107, 1053106, 1053091, 1053057, 1053056, 1053025, 1053024, 1052983, 1052980, 1052946, 1052926, 1052903, 1052851, 1052832, 1052831, 1052782, 1052781, 1052774, 1052773, 1052709, 1052668, 1052339, 1082718, 1082717, 1082714, 1082713, 1082689, 1082665, 1082592, 1082554, 1082550, 1080004, 1073202, 1073216, 1073215, 1073181, 1073182, 1073167, 1073154, 1073106, 1073086, 1073078, 1073074, 1073061, 1073009, 1073002, 1073001, 1073000, 1072945, 1702776, 1702773, 1702764, 1702742, 1702753, 1702752, 1702733, 1702685, 1702684, 1702622, 1702589, 1702481, 1103037, 1103009, 1102995, 1102982, 1102968, 1102910, 1102887, 1102852, 1102851, 1102798, 1102779, 1102724, 1102723, 1102671, 1102639, 1102513, 1102252, 1032262, 1032255, 1022256, 1022204};

        FileOutputStream fos = new FileOutputStream(new File("Commodity.img.xml"), false);
        fos.write("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\r\n".getBytes());
        fos.write("<imgdir name=\"Commodity.img\">\r\n".getBytes());
        int[] sn = {140000325, 140100697, 140200206, 140300460, 140400285, 140500217, 140600236, 140700065, 140800232, 140900087, 141000086, 160000237, 160100268};
        int idx = 0;
        int id = 0;
        for (Pair<Integer, String> item : MapleItemInformationProvider.getInstance().getAllItems()) {
            int itemid = item.left;

            boolean containsRoyal = false;
            for (int v1 : royalStyle) {
                if (v1 == itemid) {
                    containsRoyal = true;
                    break;
                }
            }
            if (containsRoyal) {
                continue;
            }
            int price = 0;
            switch (itemid / 10000) {
                case 170:
                    idx = 0;
                    price = 1000;
                    break;
                case 100:
                    idx = 1;
                    price = 1000;
                    break;
                case 110:
                    idx = 2;
                    price = 1000;
                    break;
                case 105:
                    idx = 3;
                    price = 1000;
                    break;
                case 104:
                    idx = 4;
                    price = 1000;
                    break;
                case 106:
                    idx = 5;
                    price = 1000;
                    break;
                case 107:
                    idx = 6;
                    price = 1000;
                    break;
                case 108:
                    idx = 7;
                    price = 1000;
                    break;
                case 101:
                case 103:
                    idx = 8;
                    price = 1000;
                    break;
                case 102:
                    idx = 9;
                    price = 1000;
                    break;
                case 501:
                    idx = 10;
                    price = 1000;
                    break;
                case 500:
                    idx = 11;
                    price = 1000;
                    break;
                case 180:
                    idx = 12;
                    price = 1000;
                    break;
                default:
                    idx = -1;
                    break;
            }
            if (idx == -1) {
                continue;
            }
            if (MapleItemInformationProvider.getInstance().isCash(itemid)) {
                fos.write(("    <imgdir name=\"" + id + "\">\r\n").getBytes(Charset.forName("MS949")));
                fos.write(("        <int name=\"SN\" value=\"" + sn[idx] + "\"/>\r\n").getBytes(Charset.forName("MS949")));
                fos.write(("        <int name=\"ItemId\" value=\"" + itemid + "\"/>\r\n").getBytes(Charset.forName("MS949")));
                fos.write(("        <int name=\"Count\" value=\"" + 1 + "\"/>\r\n").getBytes(Charset.forName("MS949")));
                fos.write(("        <int name=\"Price\" value=\"" + price + "\"/>\r\n").getBytes(Charset.forName("MS949")));
                fos.write(("        <int name=\"Priority\" value=\"" + 100 + "\"/>\r\n").getBytes(Charset.forName("MS949")));
                fos.write(("        <int name=\"Period\" value=\"" + 0 + "\"/>\r\n").getBytes(Charset.forName("MS949")));
                fos.write(("        <int name=\"Gender\" value=\"" + 2 + "\"/>\r\n").getBytes(Charset.forName("MS949")));
                fos.write(("        <int name=\"OnSale\" value=\"" + 1 + "\"/>\r\n").getBytes(Charset.forName("MS949")));
                fos.write(("        <int name=\"ReqPOP\" value=\"" + 0 + "\"/>\r\n").getBytes(Charset.forName("MS949")));
                fos.write(("        <int name=\"ReqLEV\" value=\"" + 0 + "\"/>\r\n").getBytes(Charset.forName("MS949")));
                fos.write(("        <int name=\"Class\" value=\"" + 3 + "\"/>\r\n").getBytes(Charset.forName("MS949")));
                fos.write(("        <int name=\"PbCash\" value=\"30\"/>\r\n").getBytes(Charset.forName("MS949")));
                fos.write(("        <int name=\"PbPoint\" value=\"30\"/>\r\n").getBytes(Charset.forName("MS949")));
                fos.write(("        <int name=\"PbGift\" value=\"30\"/>\r\n").getBytes(Charset.forName("MS949")));
                fos.write(("    </imgdir>\r\n").getBytes(Charset.forName("MS949")));
                System.out.println("sn [" + sn[idx] + "] itemid [" + itemid + "]");
                sn[idx]++;
                id++;
            }
        }

        /*        *//*
         *  SN ID : 130000000
         *
         *  스페셜 캐시 (모자) 시작부터 끝까지
         *//*
        for (int item = 1006800; item <= 1006834; item++) {
            writeCommodity(130000000, id++, item, 6000, fos);
        }*/
        writeCommodity(150000001, id++, 5150044, 10000, fos);
        writeCommodity(150100000, id++, 5152058, 5000, fos);
        writeCommodity(150200000, id++, 5680222, 15000, fos);
        writeCommodity(110000000, id++, 5680159, 4000, fos);
        for (int i = 0; i < 8; i++) {
            writeCommodity(150200001 + i, id++, 5152100 + i, 2000, fos);
        }
        fos.write("</imgdir>".getBytes());
        fos.close();
        System.out.println("끝");
    }

    public static void writeCommodity(int sn, int id, int itemid, int price, FileOutputStream fos) throws IOException {
        fos.write(("    <imgdir name=\"" + id + "\">\r\n").getBytes(Charset.forName("MS949")));
        fos.write(("        <int name=\"SN\" value=\"" + sn + "\"/>\r\n").getBytes(Charset.forName("MS949")));
        fos.write(("        <int name=\"ItemId\" value=\"" + itemid + "\"/>\r\n").getBytes(Charset.forName("MS949")));
        fos.write(("        <int name=\"Count\" value=\"" + 1 + "\"/>\r\n").getBytes(Charset.forName("MS949")));
        fos.write(("        <int name=\"Price\" value=\"" + price + "\"/>\r\n").getBytes(Charset.forName("MS949")));
        fos.write(("        <int name=\"Priority\" value=\"" + 100 + "\"/>\r\n").getBytes(Charset.forName("MS949")));
        fos.write(("        <int name=\"Period\" value=\"" + 0 + "\"/>\r\n").getBytes(Charset.forName("MS949")));
        fos.write(("        <int name=\"Gender\" value=\"" + 2 + "\"/>\r\n").getBytes(Charset.forName("MS949")));
        fos.write(("        <int name=\"OnSale\" value=\"" + 1 + "\"/>\r\n").getBytes(Charset.forName("MS949")));
        fos.write(("        <int name=\"ReqPOP\" value=\"" + 0 + "\"/>\r\n").getBytes(Charset.forName("MS949")));
        fos.write(("        <int name=\"ReqLEV\" value=\"" + 0 + "\"/>\r\n").getBytes(Charset.forName("MS949")));
        fos.write(("        <int name=\"Class\" value=\"" + 3 + "\"/>\r\n").getBytes(Charset.forName("MS949")));
        fos.write(("        <int name=\"PbCash\" value=\"30\"/>\r\n").getBytes(Charset.forName("MS949")));
        fos.write(("        <int name=\"PbPoint\" value=\"30\"/>\r\n").getBytes(Charset.forName("MS949")));
        fos.write(("        <int name=\"PbGift\" value=\"30\"/>\r\n").getBytes(Charset.forName("MS949")));
        fos.write(("    </imgdir>\r\n").getBytes(Charset.forName("MS949")));
    }
}
